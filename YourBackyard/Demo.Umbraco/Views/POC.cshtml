@using ClientDependency.Core.Mvc
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
	Layout = null;
	Html.RequiresJs("~/bower_components/angular/angular.js");
	Html.RequiresJs("http://maps.google.com/maps/api/js?sensor=false");
	Html.RequiresCss("~/css/all.css");
}
<!DOCTYPE html>
<html>
<head>
	<title>YourBackyard</title>
	@Html.RenderJsHere()
	@Html.RenderCssHere()
</head>
<body>
	<div ng-app="YourBackyard" ng-controller="YourBackyard.Controller">
		<div id="map" style="height: 500px; width: 500px;"></div>
		<a id="addYard" ng-click="addBackyard(addYardText)" href="javascript:void(0)">Add a yard!</a>
		<input name="enterName" ng-model="addYardText" type="text" />
		<p ng-show="error">You need to enter a name!</p>
		<ul>
			<li ng-repeat="backyard in backyards "><a ng-click="selectBackyard(backyard)" href="javascript:void(0)">{{backyard.name}}<span class="key-background" ng-style="{'border-color':backyard.polygon.strokeColor}"><span class="key" ng-style="{'background-color':backyard.colour}"></span></span> </a><a ng-click="deleteBackyard(backyard)" style="color: red;" href="javascript:void(0)">Delete</a></li>
		</ul>
	</div>
	<script type="text/javascript">
		var app = angular.module('YourBackyard', []);
		app.controller('YourBackyard.Controller', function ($scope) {

			////////////////// Variables //////////////////
			var map;
			var strokeWeight = 2;
			$scope.error = false;
			$scope.backyards = [];
			$scope.selectedBackyard = null;
			$scope.addYardText = "";
			////////////////// Constructors //////////////////
			function backyard(name, polygon, colour) {
				this.name = name;
				this.polygon = polygon;
				this.colour = colour;
				this.disbaled = false;
			}

			////////////////// Extensions //////////////////
			Array.prototype.remove = function (item) {
				var index = this.indexOf(item);
				this.splice(index, 1);
			}

			Array.prototype.first = function () {
				return this[0];
			}

			if (!google.maps.Polygon.prototype.getBounds) {

				google.maps.Polygon.prototype.getBounds = function () {

					var bounds = new google.maps.LatLngBounds();
					var paths = this.getPaths();
					var path;

					for (var p = 0; p < paths.getLength() ; p++) {
						path = paths.getAt(p);
						for (var i = 0; i < path.getLength() ; i++) {
							bounds.extend(path.getAt(i));
						}
					}
					return bounds;
				}
			}

			////////////////// Initilization //////////////////
			function initMap() {
				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(function (position) {
						generateMap(position.coords.longitude, position.coords.latitude, 5);
					}, generateMap(0, 0, 3));
				}
			}

			////////////////// Scope Methods //////////////////
			$scope.addBackyard = function (name) {
				var colour = getRandomColour();
				if (name != "") {
					$scope.error = false;
					var backyardToAdd = new backyard(name, generatePolygon(colour), colour);

					if ($scope.backyards.length) {
						$scope.backyards.push(backyardToAdd);
					} else {
						$scope.backyards = [backyardToAdd];
					}

					$scope.selectBackyard(backyardToAdd);
					backyardToAdd.polygon.setMap(map);
					$scope.addYardText = "";
				} else {
					$scope.error = true;
				}
			}

			$scope.deleteBackyard = function (backyard) {
				if ($scope.backyards.length) {
					$scope.selectBackyard($scope.backyards.first());
				} else {
					$scope.selectedBackyard = null;
				}
				backyard.polygon.setMap(null);
				$scope.backyards.remove(backyard);
			}

			//$scope.disableBackyard = function (backyard) {
			//	$scope.selectedBackyard = backyard;
			//}

			$scope.selectBackyard = function (backyard) {
				//First set defaults to selected yard
				if ($scope.selectedBackyard != undefined && $scope.backyards.length > 1) {
					setYardBorderColour($scope.selectedBackyard, $scope.selectedBackyard.colour);
					setYardStrokeWeight($scope.selectedBackyard, strokeWeight);
				}
				//Set a blue border on selected yard
				$scope.selectedBackyard = backyard;
				setYardBorderColour($scope.selectedBackyard, "#0000FF");
				setYardStrokeWeight($scope.selectedBackyard, 4);

				if ($scope.selectedBackyard.polygon.getPath().length) {
					var bounds = $scope.selectedBackyard.polygon.getBounds();
					map.setCenter(bounds.getCenter());
					map.fitBounds(bounds);
				}
			}

			////////////////// Utils //////////////////
			function generatePolygon(colour) {
				return new google.maps.Polygon({
					geodesic: true,
					strokeColor: colour,
					strokeOpacity: 1.0,
					strokeWeight: strokeWeight,
					fillColor: colour,
					fillOpacity: 0.35,
					draggable: true,
					editable: true
				});
			}

			function generateMap(lng, lat, zoom) {
				map = new google.maps.Map(document.getElementById('map'), {
					zoom: zoom,
					center: { lat: lat, lng: lng },
					mapTypeId: google.maps.MapTypeId.ROADMAP,
					disableDefaultUI: true
				});

				map.addListener("click", addCoord);
			}

			function getRandomColour() {
				return "#000000".replace(/0/g, function () { return (~~(Math.random() * 16)).toString(16); });
			}

			function setYardStrokeWeight(backyard, weight) {
				backyard.polygon.strokeWeight = weight;
				backyard.polygon.setMap(null);
				backyard.polygon.setMap(map);
			}

			function setYardBorderColour(backyard, colour) {
				backyard.polygon.strokeColor = colour;
				backyard.polygon.setMap(null);
				backyard.polygon.setMap(map);
			}

			////////////////// Events //////////////////
			function addCoord(event) {
				var borderSoFar = $scope.selectedBackyard.polygon.getPath();
				borderSoFar.push(event.latLng);
			}

			google.maps.event.addDomListener(window, 'load', initMap);

		});
	</script>
</body>
</html>